#PRUEBA DE LIBRERIA CLASSICAL TO QUANTUM
#desarrollado por: Saray Alieth Mendivelso Gonzalez

from class_to_quan import *
import unittest
import math

class Test_libcplx(unittest.TestCase):
    def testSistema(self):
        matrix = [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.3333333333333333, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.3333333333333333, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0]],
                  [[0, 0], [0, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0]],
                  [[0, 0], [0, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0]]]
        
        vec = [[1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]
        self.assertEqual(sisprobabilistico(  matrix[:], vec[:], 2 ),  [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.16666666666666666, 0.0],
                                                    [0.16666666666666666, 0.0], [0.3333333333333333, 0.0],
                                                    [0.16666666666666666, 0.0], [0.16666666666666666, 0.0]] )

    def testExperimentoBooleano(self):
        booleanMatrix = [[False, False, False, False, False, False], [True, False, False, False, False, True],
                         [True, False, False, False, False, False], [False, False, True, False, False, False],
                         [False, False, False, True, False, False], [False, False, False, False, True, False]]

        vec = [True, False, False, False, False, False]

        self.assertEqual(experimento(booleanMatrix[:], vec[:],1),
                         [False, True, True, False, False, False])

        self.assertEqual(experimento(booleanMatrix[:], vec[:],3),
                         [False, False, False, False, True, False])

        self.assertEqual(experimento(booleanMatrix[:], vec[:],5),
                         [False, True, False, False, False, False])

    def testSlit(self):
        matrix = [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.5, 0], [0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0, 0], [0.5, 0], [0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0, 0], [0, 0], [0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0]]]

        vectIni = [[1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]
        self.assertEqual(multipleSlit(matrix[:], vectIni[:], 1), [[0, 0], [0.3333333333333333, 0.0],
                                                                         [0.3333333333333333, 0.0],
                                                                         [0.3333333333333333, 0.0],
                                                                         [0.0, 0.0], [0.0, 0.0], [0.0, 0.0],
                                                                         [0.0, 0.0]])

        matrix = [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.5, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.3333333333333333, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.3333333333333333, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0]],
                  [[0, 0], [0, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0]],
                  [[0, 0], [0, 0], [0.3333333333333333, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0]]]

        vectIni = [[1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]
        self.assertEqual(multipleSlit(matrix[:], vectIni[:], 2),
                         [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.16666666666666666, 0.0],
                          [0.16666666666666666, 0.0], [0.3333333333333333, 0.0],
                          [0.16666666666666666, 0.0], [0.16666666666666666, 0.0]])

    def testSlitCuantico(self):
        matrix = [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.7071067811865475, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.7071067811865475, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [-0.4082482904638631, 0.4082482904638631], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [-0.4082482904638631, -0.4082482904638631], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.4082482904638631, -0.4082482904638631], [-0.4082482904638631, 0.4082482904638631], [0, 0],
                   [0, 0], [1, 0], [0, 0], [0, 0]],
                  [[0, 0], [0, 0], [-0.4082482904638631, -0.4082482904638631], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0]],
                  [[0, 0], [0, 0], [0.4082482904638631, -0.4082482904638631], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0]]]

        vectIni = [[1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]
        self.assertEqual(multipleSlitCuantico(matrix[:], vectIni[:], 1),
                         [[[0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0]],
                          [[0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0]],
                          [[0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0]],
                          [[0.1666666666666667, 0], [0.3333333333333334, 0], [0.0, 0], [1.0, 0], [0.0, 0], [0.0, 0],
                           [0.0, 0], [0.0, 0]],
                          [[0.1666666666666667, 0], [0.3333333333333334, 0], [0.0, 0], [0.0, 0], [1.0, 0], [0.0, 0],
                           [0.0, 0], [0.0, 0]],
                          [[0.0, 0], [0.3333333333333334, 0], [0.3333333333333334, 0], [0.0, 0], [0.0, 0], [1.0, 0],
                           [0.0, 0], [0.0, 0]],
                          [[0.1666666666666667, 0], [0.0, 0], [0.3333333333333334, 0], [0.0, 0], [0.0, 0], [0.0, 0],
                           [1.0, 0], [0.0, 0]],
                          [[0.1666666666666667, 0], [0.0, 0], [0.3333333333333334, 0], [0.0, 0], [0.0, 0], [0.0, 0],
                           [0.0, 0], [1.0, 0]]])


if __name__ == '__main__':
    unittest.main()
    

