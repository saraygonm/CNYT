#PRUEBA DE LIBRERIA CLASSIC TO QUANTUM
#desarrollado por: Saray Alieth Mendivelso Gonzalez

import unittest
import math
import clasic_to_quantum2 as lcp

class Test_libcplx(unittest.TestCase):
    def test_ult_mati(self):
        mati =[[[0, 1], [3, 4]],[[2,2],[4,9]],[[3,9],[3,6]],[[2,7],[5,4]]]

        self.assertEqual(lcp.ult_mati(mati),[[[1.0, 0], [25.0, 0]], 
        [[8.000000000000002, 0], [96.99999999999999, 0]], 
        [[90.0, 0], [45.00000000000001, 0]], 
        [[53.0, 0], [41.0, 0]]] )

    def sistemaprobabilistico_comple(self):
        mati = [[[1, 5], [2, 7], [9, 3], [2, 9], [1, 2], [0, 0], [1, 3], [6, 9]],
                  [[0.5,8], [1, 1], [1, 1], [1, 1], [1, 1], [0, 0], [4, 2], [3, 3]],
                  [[0.5, 6], [0, 0], [0, 3], [4, 6], [6, 6], [7, 9], [7.8, 6], [0.567, 0]],
                  [[4, 9], [0.6666, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0.9, 0], [0, 0]],
                  [[7, 3], [0.333, 0], [0, 0], [0.888, 0], [1, 0], [4, 12], [0, 0], [0, 0]],
                  [[8, 3], [8, 0], [0.778, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0]],
                  [[0, 2], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0]],
                  [[7, 4], [2, 1], [2, 5], [8, 9], [7, 9], [2, 0], [6, 9], [1, 3]]]
        vec = [[1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]  
        self.assertEqual(lcp.sistemaprobabilistico_comple(mati,vec,5),[[[2.2813889997654612e+16, 0], [3384194197757124.0, 0], [5819817363247780.0, 0], [1.176497766539072e+16, 0], [5112710102401185.0, 0], [4631605591083452.0, 0], [7068002657030568.0, 0], [6329026506479833.0, 0]], 
        [[6070482251345859.0, 0], [855206697929669.0, 0], [1503695025737416.0, 0], [2999197356755845.0, 0], [1333265067603706.0, 0], [1158567786519033.8, 0], [1855584666024913.0, 0], [1616276018134007.5, 0]], 
        [[1.0819380872722692e+16, 0], [1581493954295490.2, 0], [2452643637528748.0, 0], [5403068878372960.0, 0], [2335714534491773.0, 0], [2229864396058895.8, 0], [3220083126109869.5, 0], [2717964902070307.5, 0]], 
        [[3461923654116442.5, 0], [501971063798693.7, 0], [833495402187137.4, 0], [1596195024237432.5, 0], [695033136683201.6, 0], [590472678546041.2, 0], [974564916268107.1, 0], [893057453611424.8, 0]], 
        [[6852959792422422.0, 0], [1071272064506684.8, 0], [1592871610670622.5, 0], [3205205637692108.0, 0], [1336836894178946.8, 0], [1217852864621810.5, 0], [1861097325671728.8, 0], [1748352259209537.5, 0]],
        [[5697336392149303.0, 0], [868180423185625.2, 0], [1391281351924466.2, 0], [2721905507442411.0, 0], [1164861829781896.5, 0], [989312936228211.2, 0], [1627600340883763.2, 0], [1509403020369265.0, 0]], 
        [[135823423328411.94, 0], [19654533777461.203, 0], [32779080144625.14, 0], [62368156609162.695, 0], [27144515018076.355, 0], [23147355069539.44, 0], [38079920194811.74, 0], [35080829215360.086, 0]], 
        [[2.1868768193393092e+16, 0], [3217690904498869.5, 0], [5070262720542257.0, 0], [1.072438774264523e+16, 0], [4584034313164983.0, 0], [4437603773063906.5, 0], [6309968971466022.0, 0], [5568665428879823.0, 0]]])
    
    def sistemaprobabilistico(self):
        mati = [[[1, 5], [2, 7], [9, 3], [2, 9], [1, 2], [0, 0], [1, 3], [6, 9]],
                  [[0.5,8], [1, 1], [1, 1], [1, 1], [1, 1], [0, 0], [4, 2], [3, 3]],
                  [[0.5, 6], [0, 0], [0, 3], [4, 6], [6, 6], [7, 9], [7.8, 6], [0.567, 0]],
                  [[4, 9], [0.6666, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0.9, 0], [0, 0]],
                  [[7, 3], [0.333, 0], [0, 0], [0.888, 0], [1, 0], [4, 12], [0, 0], [0, 0]],
                  [[8, 3], [8, 0], [0.778, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0]],
                  [[0, 2], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0]],
                  [[7, 4], [2, 1], [2, 5], [8, 9], [7, 9], [2, 0], [6, 9], [1, 3]]]
        vec = [[1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]  
        self.assertEqual(lcp.sistemaprobabilistico(mati,vec,5),[[[42984486790.76995, 0], [7921801531.714879, 0], [9197945070.199995, 0], [21951180945.10911, 0], [8854483815.195326, 0], [7669928378.094161, 0], [12124171960.282875, 0], [10648054551.543514, 0]], 
        [[11871335678.653418, 0], [1660495990.7015545, 0], [2462409476.3501067, 0], [4725647307.681469, 0], [1876789127.517112, 0], [2453734232.683323, 0], [2625499979.793201, 0], [2714023490.800609, 0]], [[19942095867.228336, 0], [2537164815.0661116, 0], [5393519227.450786, 0], [10000918655.021858, 0], [5044175098.148112, 0], [2888704406.5206814, 0], [7105907959.902426, 0], [5453555139.140329, 0]], 
        [[6344095005.629516, 0], [581379617.6828831, 0], [1413493547.970003, 0], [2711699457.949763, 0], [1154375036.0531192, 0], [2015556555.7003741, 0], [1574477159.128453, 0], [1537717790.9318628, 0]], [[11508819152.48802, 0], [1088518924.47539, 0], [3171321028.042874, 0], [6709853415.271101, 0], [3453667412.478847, 0], [3171108113.579002, 0], [4558838786.6939535, 0], [3142912417.7864356, 0]],
        [[10508697250.283033, 0], [1022340306.9509417, 0], [2189980096.742317, 0], [4997753830.063117, 0], [2326299099.7344227, 0], [3287233088.5046663, 0], [3149296339.422911, 0], [2360724039.177582, 0]], [[246356830.18440518, 0], [22887921.57342324, 0], [55560654.53131041, 0], [106997517.79783843, 0], [44636586.59770879, 0], [79890825.28016, 0], [60856581.650343984, 0], [61211263.392957605, 0]], 
        [[37383032024.203545, 0], [5589313185.782589, 0], [10513877068.911413, 0], [21221477001.17952, 0], [9593207272.025883, 0], [7122258308.7871685, 0], [13624300430.956682, 0], [11684946383.022104, 0]]])
    
    def test_exp_bolean_mat(self):
        mat = [[False, False, False, False, False, False], [True, False, False, False, False, True],
                         [True, False, False, False, False, False], [False, False, True, False, False, False],
                         [False, False, False, True, False, False], [False, False, False, False, True, False]]

        vec= [True, False, False, False, False, False]   
        self.assertEqual(lcp.experi_bolean_mat(1,mat,vec), [False, True, True, False, False, False])

    def multipleslitexperimento(self):
        mati = [[[1, 5], [2, 7], [9, 3], [2, 9], [1, 2], [0, 0], [1, 3], [6, 9]],
                    [[0.5,8], [1, 1], [1, 1], [1, 1], [1, 1], [0, 0], [4, 2], [3, 3]],
                    [[0.5, 6], [0, 0], [0, 3], [4, 6], [6, 6], [7, 9], [7.8, 6], [0.567, 0]],
                    [[4, 9], [0.6666, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0.9, 0], [0, 0]],
                    [[7, 3], [0.333, 0], [0, 0], [0.888, 0], [1, 0], [4, 12], [0, 0], [0, 0]],
                    [[8, 3], [8, 0], [0.778, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0]],
                    [[0, 2], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0]],
                    [[7, 4], [2, 1], [2, 5], [8, 9], [7, 9], [2, 0], [6, 9], [1, 3]]]
        vec = [[1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]] 
        self.assertEqual(lcp.multipleslitexperimento(mati,vec,3), [[1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0]])

    def multipleslitexperimento(self):
        mati = [[[1, 5], [2, 7], [9, 3], [2, 9], [1, 2], [0, 0], [1, 3], [6, 9]],
                    [[0.5,8], [1, 1], [1, 1], [1, 1], [1, 1], [0, 0], [4, 2], [3, 3]],
                    [[0.5, 6], [0, 0], [0, 3], [4, 6], [6, 6], [7, 9], [7.8, 6], [0.567, 0]],
                    [[4, 9], [0.6666, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0.9, 0], [0, 0]],
                    [[7, 3], [0.333, 0], [0, 0], [0.888, 0], [1, 0], [4, 12], [0, 0], [0, 0]],
                    [[8, 3], [8, 0], [0.778, 0], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0]],
                    [[0, 2], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0]],
                    [[7, 4], [2, 1], [2, 5], [8, 9], [7, 9], [2, 0], [6, 9], [1, 3]]]
        vec = [[1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]] 
        self.assertEqual(lcp.multipleslitexperimento(mati,vec,3), [[1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0]])

    def multipleslitexperimento_cuantico(self):
        mati= [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.7071067811865475, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0.7071067811865475, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [-0.4082482904638631, 0.4082482904638631], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [-0.4082482904638631, -0.4082482904638631], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0]],
                  [[0, 0], [0.4082482904638631, -0.4082482904638631], [-0.4082482904638631, 0.4082482904638631], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0]],
                  [[0, 0], [0, 0], [-0.4082482904638631, -0.4082482904638631], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0]],
                  [[0, 0], [0, 0], [0.4082482904638631, -0.4082482904638631], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0]]]
        vec = [[1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]     
        self.assertEqual(lcp.multipleslitexperimento_cuantico(mati,vec,3), [[[0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0]], [[0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0]],
        [[0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0]],
        [[0.1666666666666667, 0], [0.3333333333333334, 0], [0.0, 0], [1.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0]],
        [[0.1666666666666667, 0], [0.3333333333333334, 0], [0.0, 0], [0.0, 0], [1.0, 0], [0.0, 0], [0.0, 0], [0.0, 0]], 
        [[0.0, 0], [0.3333333333333334, 0], [0.3333333333333334, 0], [0.0, 0], [0.0, 0], [1.0, 0], [0.0, 0], [0.0, 0]], 
        [[0.1666666666666667, 0], [0.0, 0], [0.3333333333333334, 0], [0.0, 0], [0.0, 0], [0.0, 0], [1.0, 0], [0.0, 0]],
        [[0.1666666666666667, 0], [0.0, 0], [0.3333333333333334, 0], [0.0, 0], [0.0, 0], [0.0, 0], [0.0, 0], [1.0, 0]]])  

    def grafico( self ):
            Mat_Doble_Rendija = [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
            [[1 / math.sqrt(2), 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
            [[1 / math.sqrt(2), 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
            [[0, 0], [-1 / math.sqrt(6), 1 / math.sqrt(6)], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
            [[0, 0], [-1 / math.sqrt(6), -1 / math.sqrt(6)], [0, 0], [0, 0], [1, 0], [0, 0], [0, 0], [0, 0]],
            [[0, 0], [1 / math.sqrt(6), -1 / math.sqrt(6)], [-1 / math.sqrt(6), 1 / math.sqrt(6)], [0, 0], [0, 0],[1, 0], [0, 0], [0, 0]],
            [[0, 0], [0, 0], [-1 / math.sqrt(6), -1 / math.sqrt(6)], [0, 0], [0, 0], [0, 0], [1, 0], [0, 0]],
            [[0, 0], [0, 0], [1 / math.sqrt(6), -1 / math.sqrt(6)], [0, 0], [0, 0], [0, 0], [0, 0], [1, 0]]]
        
            Estado_Inicial = [[1, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]

            res = lcp.accion(lcp.multipleslitexperiment_cuantico(Mat_Doble_Rendija,Estado_Inicial, 2),  Estado_Inicial) 
            lcp.grafico(res)
        

if __name__ == '__main__':
    unittest.main()
